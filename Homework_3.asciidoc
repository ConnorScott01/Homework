== Week 3 (Wed) - Booleans, Tuples, and Dictionaries

== Booleans

A `boolean` is one of the simplest Python types, and it can have two
values: `True` and `False` (with uppercase `T` and `F`):


+*In[ ]:*+
[source, ipython3]
----
a = True
b = False
print (a)
----

Booleans can be combined with logical operators to give other booleans:


+*In[ ]:*+
[source, ipython3]
----
True and False
----


+*In[ ]:*+
[source, ipython3]
----
True or False
----


+*In[ ]:*+
[source, ipython3]
----
(False and (True or False)) or (False and True)
----

Standard comparison operators can also produce booleans:


+*In[ ]:*+
[source, ipython3]
----
1 == 3
----


+*In[ ]:*+
[source, ipython3]
----
1 != 3
----


+*In[ ]:*+
[source, ipython3]
----
3 > 2
----


+*In[ ]:*+
[source, ipython3]
----
3 <= 3.4
----

== Exercise 1

Write an expression that returns `True` if `x` is strictly greater than
3.4 and smaller or equal to 6.6, or if it is 2, and try changing `x` to
see if it works:


+*In[1]:*+
[source, ipython3]
----
x = 2
(x > 3.4 and x <= 6.6) or x == 2
# your solution here

----


+*Out[1]:*+
----True----

== Tuples

Tuples are, like lists, a type of sequence, but they use round
parentheses rather than square brackets:


+*In[ ]:*+
[source, ipython3]
----
t = (1, 2, 3)
----

They can contain heterogeneous types like lists:


+*In[ ]:*+
[source, ipython3]
----
t = (1, 2.3, 'spam')
----

and also support item access and slicing like lists:


+*In[ ]:*+
[source, ipython3]
----
t[1]
----


+*In[ ]:*+
[source, ipython3]
----
t[:2]
----

The main difference is that they are *immutable*, like strings:


+*In[ ]:*+
[source, ipython3]
----
t[1] = 2
----

We will not go into the details right now of why this is useful, but you
should know that these exist as you may encounter them in examples.

== Dictionaries

One of the data types that we have not talked about yet is called
_dictionaries_ (`dict`). If you think about what a `real' dictionary is,
it is a list of words, and for each word is a definition. Similarly, in
Python, we can assign definitions (or `values'), to words (or
`keywords').

Dictionaries are defined using curly brackets `{}`:


+*In[ ]:*+
[source, ipython3]
----
d = {'a':1, 'b':2, 'c':3}
----

Items are accessed using square brackets and the `key':


+*In[ ]:*+
[source, ipython3]
----
d['a']
----


+*In[ ]:*+
[source, ipython3]
----
d['c']
----

Values can also be set this way:


+*In[ ]:*+
[source, ipython3]
----
d['r'] = 2.2
----


+*In[ ]:*+
[source, ipython3]
----
print(d)
----

The keywords donâ€™t have to be strings, they can be many (but not all)
Python objects:


+*In[ ]:*+
[source, ipython3]
----
e = {}
e['a_string'] = 3.3
e[3445] = 2.2
e[complex(2,1)] = 'value'
----


+*In[ ]:*+
[source, ipython3]
----
print(e)
----


+*In[ ]:*+
[source, ipython3]
----
e[3445]
----

If you try and access an element that does not exist, you will get a
`KeyError`:


+*In[ ]:*+
[source, ipython3]
----
e[4]
----

Also, note that dictionaries do _not_ know about order, so there is no
`first' or `last' element.

It is easy to check if a specific key is in a dictionary, using the `in`
operator:


+*In[ ]:*+
[source, ipython3]
----
"a" in d
----


+*In[ ]:*+
[source, ipython3]
----
"t" in d
----

Note that this also works for lists:


+*In[ ]:*+
[source, ipython3]
----
3 in [1,2,3]
----

== Exercise 2

Try making a dictionary to translate a few English words into Spanish
and try using it!

perro = dog; gato = cat; hola = hello; star = estrella; adios = goodbye;
por favor = please; gracias = thank you; lo siento = sorry


+*In[2]:*+
[source, ipython3]
----
etosp = {'perro':'dog', 'gato':'cat', 'hola':'hello', 'estrella':'star', 'adios':'goodbye','por favor':'please', 'gracias':'thank you', 'lo siento':'sorry'}
etosp['gato']
# your solution here

----


+*Out[2]:*+
----'cat'----

== Exercise 3 - Cryptography

Cryptography is the study of how to make messages secret or how to read
secret messages. A very simple encryption technique is called the
_Caesar cipher_, which you can read up more about
http://en.wikipedia.org/wiki/Caesar_cipher[here]. The basic idea is that
each letter is replaced by a letter that is a certain number of letters
away, so for example if the shift was 2, then A would become C, B would
become D, etc. (and Z will become B).

As we will learn in more detail tomorrow, you can write your own
functions in Python, the simplest of which can take the form:


+*In[ ]:*+
[source, ipython3]
----
def encrypt(string, key):
    # do things here
    return new_string
----

Write a function that given a string and a shift, will return the
encrypted string for that shift. Note that the same function can be used
to decrypt a message, by passing it a negative shift.

The rules are: you should only accept and return lowercase letters, and
spaces should not be changed.

Then, decrypt the following message, which was encrypted with a shift of
13:

....
pbatenghyngvbaf lbh unir fhpprrqrq va qrpelcgvat gur fgevat    
....

Now if you are up for a challenge, try and decrypt this *and* find the
shift:

....
gwc uivioml bw nqvl bpm zqopb apqnb
....

Hint: there are several ways you can convert between letters and
numbers. One is to use the built-in functions `chr` and `ord` (and
remember you can find out more about a function by using `?` in
IPython). Another is to set up the alphabet in a string and use item
access (`[4]`) to convert from numbers to letters, and the `index`
method to convert from letters to numbers.


+*In[3]:*+
[source, ipython3]
----
def encrypt(string, shift):

    new_string = ""
    
    for letter in string:
        
        if letter == ' ':
            new_letter = ' '
        else:
            
            i = ord(letter) + shift
            
            if i > ord('z'):
                i -= 26
            elif i < ord('a'):
                i += 26
            
            new_letter = chr(i)
            
        new_string += new_letter

    return new_string
     
print(encrypt("pbatenghyngvbaf lbh unir fhpprrqrq va qrpelcgvat gur fgevat", -13))
----


+*Out[3]:*+
----
congratulations you have succeeded in decrypting the string
----


+*In[4]:*+
[source, ipython3]
----
for shift in range(26):
    print(shift, encrypt("gwc uivioml bw nqvl bpm zqopb apqnb", -shift))
----


+*Out[4]:*+
----
0 gwc uivioml bw nqvl bpm zqopb apqnb
1 fvb thuhnlk av mpuk aol ypnoa zopma
2 eua sgtgmkj zu lotj znk xomnz ynolz
3 dtz rfsflji yt knsi ymj wnlmy xmnky
4 csy qerekih xs jmrh xli vmklx wlmjx
5 brx pdqdjhg wr ilqg wkh uljkw vkliw
6 aqw ocpcigf vq hkpf vjg tkijv ujkhv
7 zpv nbobhfe up gjoe uif sjhiu tijgu
8 you managed to find the right shift
9 xnt lzmzfdc sn ehmc sgd qhfgs rghes
10 wms kylyecb rm dglb rfc pgefr qfgdr
11 vlr jxkxdba ql cfka qeb ofdeq pefcq
12 ukq iwjwcaz pk bejz pda necdp odebp
13 tjp hvivbzy oj adiy ocz mdbco ncdao
14 sio guhuayx ni zchx nby lcabn mbczn
15 rhn ftgtzxw mh ybgw max kbzam labym
16 qgm esfsywv lg xafv lzw jayzl kzaxl
17 pfl drerxvu kf wzeu kyv izxyk jyzwk
18 oek cqdqwut je vydt jxu hywxj ixyvj
19 ndj bpcpvts id uxcs iwt gxvwi hwxui
20 mci aobousr hc twbr hvs fwuvh gvwth
21 lbh znantrq gb svaq gur evtug fuvsg
22 kag ymzmsqp fa ruzp ftq dustf eturf
23 jzf xlylrpo ez qtyo esp ctrse dstqe
24 iye wkxkqon dy psxn dro bsqrd crspd
25 hxd vjwjpnm cx orwm cqn arpqc bqroc
----


+*In[5]:*+
[source, ipython3]
----
def encrypt(string, shift):

    new_string = ""
    
    for letter in string:
        
        if letter == ' ':
            new_letter = ' '
        else:
            
            i = ord(letter) + shift
            
            if i > ord('z'):
                i -= 26
            elif i < ord('a'):
                i += 26
            
            new_letter = chr(i)
            
        new_string += new_letter

    return new_string

print(encrypt("gwc uivioml bw nqvl bpm zqopb apqnb", -8))
----


+*Out[5]:*+
----
you managed to find the right shift
----


+*In[ ]:*+
[source, ipython3]
----

----
